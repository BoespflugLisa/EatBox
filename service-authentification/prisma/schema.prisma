generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model clients {
  id        Int     @id @default(autoincrement())
  fk_user   Int     @unique(map: "Clients_fk_user_key")
  Lastname  String
  Firstname String
  Address   Json?
  Phone     String?
  users     users   @relation(fields: [fk_user], references: [id], onDelete: Cascade, map: "Clients_fk_user_fkey")
}

model components {
  id        Int    @id @default(autoincrement())
  name      String
  downloads Int
}

model developers {
  id        Int    @id @default(autoincrement())
  fk_user   Int    @unique(map: "Developers_fk_user_key")
  Lastname  String
  Firstname String
  users     users  @relation(fields: [fk_user], references: [id], onDelete: Cascade, map: "Developers_fk_user_fkey")
}

model livreurs {
  id           Int     @id @default(autoincrement())
  fk_user      Int     @unique(map: "Livreurs_fk_user_key")
  Lastname     String
  Firstname    String
  Phone        String
  ProfileImg   String? @db.LongText
  Open_to_work Boolean
  Free         Boolean
  AccountName  String?
  IBAN         String?
  users        users   @relation(fields: [fk_user], references: [id], onDelete: Cascade, map: "Livreurs_fk_user_fkey")
}

model restaurants {
  id          Int     @id @default(autoincrement())
  fk_user     Int     @unique(map: "Restaurants_fk_user_key")
  Name        String
  Phone       String?
  Address     Json?
  hours       Json?
  Type        String?
  CoverImg    String? @db.LongText
  Legal       Json?
  Preferences Json?
  Sponsors    Json?
  users       users   @relation(fields: [fk_user], references: [id], onDelete: Cascade, map: "Restaurants_fk_user_fkey")
}

model roles {
  id    Int     @id @default(autoincrement())
  title String
  users users[]
}

model services {
  id          Int    @id @default(autoincrement())
  name        String
  IP          String
  Description String
  Port        Int
  URL         String
  Type        String
}

model token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  value     String?  @unique(map: "Token_value_key")
  userId    Int      @unique(map: "Token_userId_key")
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Token_userId_fkey")
}

model users {
  id          Int          @id @default(autoincrement())
  email       String       @unique(map: "Users_email_key")
  Password    String
  fk_role     Int
  role       roles        @relation(fields: [fk_role], references: [id], map: "Users_fk_role_fkey")
  clients     clients?
  developers  developers?
  livreurs    livreurs?
  restaurants restaurants?
  token       token?

  @@index([fk_role], map: "Users_fk_role_fkey")
}
